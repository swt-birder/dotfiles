"""""""""""""""""""""""""""""""""""""""""""""""""
"             Initialization                    "
"""""""""""""""""""""""""""""""""""""""""""""""""
" vi 互換モードで動作させない
set nocompatible

" vim-plugがなければ自動インストール
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
  " completion and linting
  Plug 'Valloric/YouCompleteMe'
  Plug 'w0rp/ale'
  " colorschemes
  Plug 'tomasr/molokai'
  " utilities
  Plug 'Yggdroot/indentLine'
  Plug 'bronson/vim-trailing-whitespace'
  Plug 'airblade/vim-gitgutter'
  Plug 'itchyny/lightline.vim'
  Plug 'tpope/vim-fugitive'
call plug#end()

let s:plug = {
      \ "plugs": get(g:, 'plugs', {})
      \ }

function! s:plug.is_installed(name)
  return has_key(self.plugs, a:name) ? isdirectory(self.plugs[a:name].dir) : 0
endfunction

if s:plug.is_installed("molokai")
  " color
  colorscheme molokai
endif

"""""""""""""""""""""""""""""""""""""""""""""""""
"             Editing                           "
"""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
" タブをスペースに変換する
set expandtab
" このオプションが on のとき、行頭の連続した空白に限り、<Tab> は 'shiftwidth' 分だけ空白を挿入します。
set smarttab
" 自動で挿入されるインデントのスペース幅
set shiftwidth=2
 "<Tab> や <BS> を入力した際にその文字数分空白を入力したり削除したりします。
set softtabstop=2
" https://vim-jp.org/vim-users-jp/2010/04/06/Hack-137.html
set autoindent
set copyindent
set preserveindent
" 挿入モードでバックスペースで削除できるようにする
set backspace=indent,eol,start
" yank したテキストをクリップボードに格納する
"set clipboard=unnamed,autoselect
"ファイルを開いたときにタブ文字があったらスペースに変換
autocmd BufNewFile,BufRead * set expandtab
autocmd BufNewFile,BufRead * retab

"""""""""""""""""""""""""""""""""""""""""""""""""
"             UI                                "
"""""""""""""""""""""""""""""""""""""""""""""""""
set number
set title
set mouse=a
set lazyredraw
" 入力中のコマンドを表示する
set showcmd
" カーソルの位置表示を行う
set ruler
" 括弧の対応関係を一瞬表示する
set showmatch
" 括弧の対応関係表示を0.1秒に変更(デフォルトは0.5秒)
set matchtime=1
" 不可視文字を表示する
set list
" 表示する形式を変更
set listchars=tab:>\ ,trail:-,nbsp:+
" 一行の文字数が多くても@で省略されずにきちんと描画される
set display=lastline
" ファイル名等の情報を表示するステータスバーを追加
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""
"             Search                            "
"""""""""""""""""""""""""""""""""""""""""""""""""
" 検索語句のハイライト
set hlsearch
" 検索時に英大小文字の区別を無視する
set ignorecase
" 検索時に全て英小文字で入力した場合のみ英大小文字区別を無視する
set smartcase
" 検索した際に最後の語句の次に最初の語句にループするようにする
set wrapscan
" インクリメンタルサーチしない
set incsearch

"""""""""""""""""""""""""""""""""""""""""""""""""
"             Keybindings                       "
"""""""""""""""""""""""""""""""""""""""""""""""""
"  Leaderキーをspaceにする
let mapleader="\<Space>"
"  Y を、行末までのヤンクにする
nnoremap Y y$
" 数字のインクリメント/デクリメント
nnoremap + <C-a>
nnoremap - <C-x>
"方向キーの無効化
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
" emacs key binding
inoremap <C-p> <Up>
inoremap <C-n> <Down>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
"jキーを二度押しでESCキー
inoremap <silent> jj <Esc>
" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

"""""""""""""""""""""""""""""""""""""""""""""""""
"             Misc                              "
"""""""""""""""""""""""""""""""""""""""""""""""""
"---------------------------------------
" ale
"---------------------------------------
" flake8をLinterとして登録
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ }

" 各ツールをFixerとして登録
let g:ale_fixers = {
    \ 'python': ['autopep8', 'black', 'isort'],
    \ }
let g:python3_host_prog = '/usr/local/bin/python3'
" 各ツールの実行オプションを変更してPythonパスを固定
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'
" ついでにFixを実行するマッピングしとく
nmap <silent> <Leader>x <Plug>(ale_fix)
" ファイル保存時に自動的にFixするオプションもあるのでお好みで
let g:ale_fix_on_save = 1
"---------------------------------------
" YouCompleteMe
"---------------------------------------
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
" YouCompleteMe を自動的に起動
let g:ycm_auto_trigger = 1
" 識別子補完機能が起動するのに、ユーザが入力していなければならない文字数の最小
let g:ycm_min_num_of_chars_for_completion = 1
" vim のインサートモードを抜けた後にプレビューウィンドウを自動的に閉じるようになります。
let g:ycm_autoclose_preview_window_after_insertion = 1
" 補完候補をEnterで選択したときに改行されないようにする
" https://github.com/ycm-core/YouCompleteMe/issues/232
let g:ycm_key_list_stop_completion = ['<C-y>', '<CR>']

"---------------------------------------
" vim-gitgutter
"---------------------------------------
" タイピング停止から反映までの時間
set updatetime=250
" 差分にジャンプ
nmap [n <Plug>(GitGutterNextHunk)
nmap ]n <Plug>(GitGutterPrevHunk)

"---------------------------------------
" lightline
"---------------------------------------
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }
"---------------------------------------
" fugitive.vim
"---------------------------------------
nnoremap [fugitive]  <Nop>
nmap <space>g [fugitive]
nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
nnoremap <silent> [fugitive]a :Gwrite<CR>
nnoremap <silent> [fugitive]c :Gcommit-v<CR>
nnoremap <silent> [fugitive]b :Gblame<CR>
nnoremap <silent> [fugitive]d :Gdiff<CR>
nnoremap <silent> [fugitive]m :Gmerge<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""
"             General                           "
"""""""""""""""""""""""""""""""""""""""""""""""""
"履歴を10000件保存
set history=10000
" コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu

